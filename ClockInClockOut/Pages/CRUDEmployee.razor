@page "/CRUDEmployee"
@page "/CRUDEmployee/{IdNumber:int}"
@attribute [Authorize]
@inject IEmployeeServices EmployeeService
@inject IJSRuntime jsRuntime

<style>
    .form-control {
        width: 90%;
    }
</style>

@if (idNumber == null)
{
    <h3>Create a new employee</h3>
}
else
{
    <h3>Edit "@employee.FirstName"</h3>
}
<table style="width:100%">
    <td style="width:50%">

        <EditForm Model="employee" OnSubmit="HandleSubmit">
            @if (idNumber != null) //if editting an existing employee, cannot edit employee ID.
            {
                <div>
                    <label for="IdNumber">Employee ID</label>
                    <InputNumber id="IdNumber" @bind-Value="employee.IdNumber" class="form-control" readonly></InputNumber>
                </div>
            }
            else // adding employee ID
            {
                <div>
                    <label for="IdNumber">Employee ID</label>
                    <InputNumber id="IdNumber" @bind-Value="employee.IdNumber" class="form-control"></InputNumber>
                </div>
            }
            <div>
                <label for="FirstName">First Name</label>
                <InputText id="FirstName" @bind-Value="employee.FirstName" class="form-control"></InputText>
            </div>
            <div>
                <label for="LastName">Last Name</label>
                <InputText id="LastName" @bind-Value="employee.LastName" class="form-control"></InputText>
            </div>
            <br />
            <button type="submit" class="btn btn-primary">@btnText</button>
            @if (idNumber != null)
            {
                <button type="button" class="btn btn-danger" @onclick="DeleteEmployee">Delete Employee</button>
            }
        </EditForm>
    </td>
    <td>
        <div>
            <strong>To Create an Employee</strong> <hr>
            Employee ID: Enter four digit code <br>
            - Must be UNIQUE <br>
            - Value between 1000 - 9999<br>
            First Name: first name of the employee <br>
            Last Name: last name of the employee <br>
            <br>
            <strong>To Modify an Employee</strong><hr>
            Employee ID cannot be modified.<br>
            To change employee ID, delete the current employee, then create a new employee.
        </div>
    </td>
</table>



@code {
    [Parameter]
    public int? idNumber { get; set; }

    string btnText = string.Empty;

    Employee employee = new Employee();

    protected override void OnInitialized()
    {
        btnText = idNumber == null ? "Save new Employee" : "Update Employee";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (idNumber == null)
        {
            //do nothing
        }
        else
        {
            employee = await EmployeeService.GetEmployee((int)idNumber);
        }

    }
    bool DupID = false;
    bool RangeID = false;
    async Task HandleSubmit()
    {
            if (employee.IdNumber < 1000 || employee.IdNumber > 9999)
            {
                await jsRuntime.InvokeVoidAsync("alert", "The Employee ID must have four digit number. Please enter a value between 1000 and 9999.");
                RangeID = true;
            }
        foreach (var employee2 in EmployeeService.Employees)
        {

            if (employee2.IdNumber == employee.IdNumber)
            {
                //employee id duplicate
                await jsRuntime.InvokeVoidAsync("alert", "The Employee ID you enterd was already in the system. Please enter a new unique ID.");
                DupID = true;
            }


        }
        if (DupID == false && RangeID == false )
        {

            if (idNumber == null)
            {
                await EmployeeService.CreateEmployee(employee);
            }
            else
            {
                await EmployeeService.UpdateEmployee(employee, (int)idNumber);
            }
        }
        else
        {
            this.employee = new Employee();
            this.employee.IdNumber = 0;
            RangeID = false;
            DupID = false;
        }
    }


    async Task DeleteEmployee()
    {
        await EmployeeService.DeleteEmployee(employee.IdNumber);
    }

}
