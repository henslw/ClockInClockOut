@page "/CRUDEmployee"
@page "/CRUDEmployee/{IdNumber:int}"
@inject IJSRuntime jsRuntime
@inject IEmployeeServices EmployeeService
@attribute [Authorize]
<style>
    .form-control{
        width: 50%;
    }
</style>

@if (idNumber == null)
{
    <h3>Create a new employee</h3>
}
else
{
    <h3>Edit "@employee.FirstName"</h3>
}

<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="IdNumber">Employee ID</label>
        <InputNumber id="IdNumber" @bind-Value="employee.IdNumber" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="employee.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="employee.LastName" class="form-control"></InputText>
    </div>
    <div>
        <label for="IsClockedIN">ClockedIn</label>
        <InputSelect id="IsClockedIN" @bind-Value="employee.IsClockedIN" class="form-control">
            <option value="true">True</option>
            <option value="false">False</option>
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (idNumber != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteEmployee">Delete Employee</button>
    }
</EditForm>



@code {
    [Parameter]
    public int? idNumber { get; set; }

    string btnText = string.Empty;

    Employee employee = new Employee();

    protected override void OnInitialized()
    {
        btnText = idNumber == null ? "Save new Employee" : "Update Employee";

    }

    protected override async Task OnInitializedAsync()
    {
        await EmployeeService.LoadEmployees();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (idNumber == null)
        {
            //do nothing
        }
        else
        {
            employee = await EmployeeService.GetEmployee((int)idNumber);
        }

    }
    bool DupID = false;
    async Task HandleSubmit()
    {

        foreach (var employee2 in EmployeeService.Employees)
        {

            if (employee2.IdNumber == employee.IdNumber)
            {
                //employee id duplicate
                await jsRuntime.InvokeVoidAsync("alert", "The Employee ID you enterd was already in the system. Please enter a new unique ID.");
                DupID = true;
            }
        }
        if (DupID == false)
        {

            if (idNumber == null)
            {
                await EmployeeService.CreateEmployee(employee);
            }
            else
            {
                await EmployeeService.UpdateEmployee(employee, (int)idNumber);
            }
        }
        else { 
        this.employee = new Employee();
        this.employee.IdNumber = 0;
        DupID = false;
    }
    }
        


    async Task DeleteEmployee()
    {
        await EmployeeService.DeleteEmployee(employee.IdNumber);
    }

}
