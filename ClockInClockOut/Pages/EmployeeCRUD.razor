@page "/EmployeesCRUD"
@page "/EmployeesCRUD/{IdNumber:int}"

@inject IEmployeeServices EmployeeService

@if(idNumber == null){
    <h3>Create a new employee</h3>
}
else
{
    <h3>Edit "@employee.FirstName"</h3>
}

<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="IdNumber">Id Number</label>
        <InputNumber id="IdNumber" @bind-Value="employee.IdNumber" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="FirstName">First Name</label>
        <InputText id="FirstName" @bind-Value="employee.FirstName" class="form-control"></InputText>
    </div>
    <div>
        <label for="LastName">Last Name</label>
        <InputText id="LastName" @bind-Value="employee.LastName" class="form-control"></InputText>

    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if (idNumber != null)
    {
        <button type="button" class="btn btn-danger" @onclick = "DeleteEmployee">Delete Employee</button>
    }
</EditForm>



@code {
    [Parameter]
    public int? idNumber{ get; set;}

    string btnText = string.Empty;

    Employee employee = new Employee();

    protected override void OnInitialized()
    {
        btnText = idNumber == null ? "Save new Employee" : "Update Employee";
    }

    protected override async Task OnParametersSetAsync()
    {
        if(idNumber != null)
        {
            employee = await EmployeeService.GetEmployee((int)idNumber);
        }

    }

    async Task HandleSubmit()
    {
        if(idNumber == null)
        {
            await EmployeeService.CreateEmployee(employee);
        }
        else
        {
            await EmployeeService.UpdateEmployee(employee, (int)idNumber);
        }
    }

    async Task DeleteEmployee()
    {
        await EmployeeService.DeleteEmployee(employee.IdNumber);
    }

}
