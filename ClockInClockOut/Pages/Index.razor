@page "/"
@inject IEmployeeServices EmployeeService
@inject IRecordServices RecordServices

<!DOCTYPE html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        .header{
        padding: 25px 50px 50px 25px;
        text-align: center;
        font-family: Arial;
        font-size: 12px;
        border-radius: 25px;
        color: Black;
        background-color: #1569C7;
        width: 100%;
        }

        .header img {
        position:relative;
        width: 200px;
        height: 80px;
        top: 0px;
        right: 370px;
        }

        .header h1 {    
          position: center;
          width: 100%;
          text-align:center
        }

        .button {
          border: none;
          color: white;
          width: 20%;
          padding: 18px 36px;
          text-align: center;
          border-radius: 25px;
          display: inline-block;
          font-size: 16px;
          position: relative;
          margin: 4px 16px;
          transition-duration: 0.3s;
          cursor: pointer;
        }
        .input {                  /* 4 Digit code Button*/
          border: solid black 1.5px;
          color: black;
          width: 20%;
          padding: 18px 36px;
          text-align: center;
          border-radius: 25px;
          display: inline-block;
          font-size: 16px;        /* Font size of date */
          position: relative;
          transition-duration: 0.3s;
          cursor: pointer;
        }
        .input:hover {            /* Use the :hover selector to change the style of the button when you move the mouse over it. */
          background-color: #2860DE;
          color: black;
          border: 2px solid #008CBA
        }
        .button3 {
          background-color: #1569C7;
          border-radius: 25px;
          position: relative;
          width: 20%;
          height: 80px;
          table-layout: fixed;
          color: black; 
          border: 2px solid #008CBA;    /* Blue */
        }
        .button3:hover {            /* Use the :hover selector to change the style of the button when you move the mouse over it. */
          background-color: #2860DE;
          color: white;
          border: 2px solid #008CBA
        }
    </style>
</head>

<div class= "header">
    <img src="https://afcsushi.com/wp-content/uploads/2017/03/about_logo.png" alt="logo"/>       <!--- Importing AFC Logo -->    
<h1> <b> Clock In/Clock Out </b></h1>
</div> <br>

<p><strong> Enter your 4 digit code, then press Clock In/Out button.</strong></p>

<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="IdNumber"><b></b></label>
        <InputNumber id="IdNumber" @bind-Value="employee.IdNumber" class="input" type="text" size="4" maxlength="4" minlength="4" placeholder="4 Digit Code" ></InputNumber>
    </div>
    <br>
<button type="submit" class="button3"><b>Clock in/Clock out</b></button>
</EditForm>

@code{
    Employee employee = new Employee();
    Record record = new Record();


    async Task HandleSubmit()
    {
        await ClockInRecord(employee.IdNumber);
        employee.IdNumber = 0;
        this.record = new Record();
        this.employee = new Employee();
    }

    async Task ClockInRecord(int idNumber)
    {

        var employee = await EmployeeService.GetEmployee((int)idNumber);
        if (employee.IsClockedIN == false)
        {
            record.IdNumber = employee.IdNumber;
            record.EmployeeName = employee.FirstName + " " + employee.LastName;
            record.ClockInTime = DateTime.Now;

            employee.IsClockedIN = true;

            await RecordServices.CreateRecord2(record);

            await EmployeeService.UpdateEmployee2(employee,employee.IdNumber);
        }
        else if (employee.IsClockedIN == true)
        {
            await RecordServices.LoadRecord();
            await ClockOUTRecord(employee);
        }
    }

    async Task ClockOUTRecord(Employee employee)
    {
        
        foreach (var record in RecordServices.Records)
        {
            if (record.ClockInTime.Date == DateTime.Today.Date && record.IdNumber == employee.IdNumber && record.ClockOutTime == DateTime.MinValue)
            {

                int RecordID = employee.IdNumber;

                var record1 = await RecordServices.GetRecord((int)record.ItemNumber);

                record1.ClockOutTime = DateTime.Now;
                int ItemNum = record1.ItemNumber;

                TimeSpan diff = record1.ClockOutTime - record1.ClockInTime;
                double hours = diff.TotalHours;
                record.TotalHoursWorked = hours;
                employee.IsClockedIN = false;

                await EmployeeService.UpdateEmployee2(employee, employee.IdNumber);
                await RecordServices.UpdateRecord2(record1, ItemNum);
            }
            else
            {

            }
        }

    }
}
