@page "/"
@inject IEmployeeServices EmployeeService
@inject IRecordServices RecordServices

<PageTitle>Index</PageTitle>

<h1> Clock In/Out Application</h1>


<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="IdNumber">Id Number</label>
        <InputNumber id="IdNumber" @bind-Value="employee.IdNumber" class="form-control" style="width: 200px;" maxlength = "10"></InputNumber>
    </div>

<button type="submit" class="btn btn-primary">Clock in/Clock out</button>

</EditForm>

@code{
    //[Parameter]
    // public int? idNumber{ get; set;}


    async Task HandleSubmit()
    {
        await ClockInRecord(employee.IdNumber);
        this.employee.IdNumber = 0;
        
    }

    Employee employee = new Employee();

    Record record = new Record();

    async Task ClockInRecord(int idNumber)
    {

        var employee = await EmployeeService.GetEmployee((int)idNumber);
        if (employee.IsClockedIn == false)
        {
            //Record record = new Record();
            record.IdNumber = employee.IdNumber;
            record.EmployeeName = employee.FirstName + " " + employee.LastName;
            record.ClockInTime = DateTime.Now;
           
            employee.IsClockedIn = true;


            await RecordServices.CreateRecord2(record);
            await EmployeeService.UpdateEmployee2(employee,employee.IdNumber);
        }
        else if (employee.IsClockedIn == true)
        {
            
            await ClockOutRecord(employee);
        }
    }

    async Task ClockOutRecord(Employee employee) {

        foreach (var record in RecordServices.Records){
            if (record.ClockInTime.Date == DateTime.Today.Date && record.IdNumber == employee.IdNumber && record.ClockOutTime == DateTime.MinValue)
            {

                //int RecordID = employee.IdNumber;

                var record1 = await RecordServices.GetRecord((int)record.ItemNumber);

                record1.ClockOutTime = DateTime.Now;
                int ItemNum = record1.ItemNumber;

                TimeSpan diff = record1.ClockOutTime - record1.ClockInTime;
                double hours = diff.TotalHours;
                record.TotalHoursWorked = hours;
                employee.IsClockedIn = false;

                await EmployeeService.UpdateEmployee2(employee, employee.IdNumber);
                await RecordServices.UpdateRecord2(record1, ItemNum);
            }
            else{}
        }

        

        
    }

    }